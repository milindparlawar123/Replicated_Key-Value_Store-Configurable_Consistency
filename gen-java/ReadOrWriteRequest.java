/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.13.0)", date = "2020-11-24")
public class ReadOrWriteRequest implements org.apache.thrift.TBase<ReadOrWriteRequest, ReadOrWriteRequest._Fields>, java.io.Serializable, Cloneable, Comparable<ReadOrWriteRequest> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ReadOrWriteRequest");

  private static final org.apache.thrift.protocol.TField IS_COORDINATOR_FIELD_DESC = new org.apache.thrift.protocol.TField("isCoordinator", org.apache.thrift.protocol.TType.BOOL, (short)1);
  private static final org.apache.thrift.protocol.TField TIMESTAMP_FIELD_DESC = new org.apache.thrift.protocol.TField("timestamp", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField CONSISTENCY_LEVEL_FIELD_DESC = new org.apache.thrift.protocol.TField("consistencyLevel", org.apache.thrift.protocol.TType.I32, (short)3);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new ReadOrWriteRequestStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new ReadOrWriteRequestTupleSchemeFactory();

  public boolean isCoordinator; // required
  public @org.apache.thrift.annotation.Nullable java.lang.String timestamp; // optional
  /**
   * 
   * @see ConsistencyLevel
   */
  public @org.apache.thrift.annotation.Nullable ConsistencyLevel consistencyLevel; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    IS_COORDINATOR((short)1, "isCoordinator"),
    TIMESTAMP((short)2, "timestamp"),
    /**
     * 
     * @see ConsistencyLevel
     */
    CONSISTENCY_LEVEL((short)3, "consistencyLevel");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // IS_COORDINATOR
          return IS_COORDINATOR;
        case 2: // TIMESTAMP
          return TIMESTAMP;
        case 3: // CONSISTENCY_LEVEL
          return CONSISTENCY_LEVEL;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ISCOORDINATOR_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.TIMESTAMP};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.IS_COORDINATOR, new org.apache.thrift.meta_data.FieldMetaData("isCoordinator", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.TIMESTAMP, new org.apache.thrift.meta_data.FieldMetaData("timestamp", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CONSISTENCY_LEVEL, new org.apache.thrift.meta_data.FieldMetaData("consistencyLevel", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, ConsistencyLevel.class)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ReadOrWriteRequest.class, metaDataMap);
  }

  public ReadOrWriteRequest() {
  }

  public ReadOrWriteRequest(
    boolean isCoordinator,
    ConsistencyLevel consistencyLevel)
  {
    this();
    this.isCoordinator = isCoordinator;
    setIsCoordinatorIsSet(true);
    this.consistencyLevel = consistencyLevel;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ReadOrWriteRequest(ReadOrWriteRequest other) {
    __isset_bitfield = other.__isset_bitfield;
    this.isCoordinator = other.isCoordinator;
    if (other.isSetTimestamp()) {
      this.timestamp = other.timestamp;
    }
    if (other.isSetConsistencyLevel()) {
      this.consistencyLevel = other.consistencyLevel;
    }
  }

  public ReadOrWriteRequest deepCopy() {
    return new ReadOrWriteRequest(this);
  }

  @Override
  public void clear() {
    setIsCoordinatorIsSet(false);
    this.isCoordinator = false;
    this.timestamp = null;
    this.consistencyLevel = null;
  }

  public boolean isIsCoordinator() {
    return this.isCoordinator;
  }

  public ReadOrWriteRequest setIsCoordinator(boolean isCoordinator) {
    this.isCoordinator = isCoordinator;
    setIsCoordinatorIsSet(true);
    return this;
  }

  public void unsetIsCoordinator() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ISCOORDINATOR_ISSET_ID);
  }

  /** Returns true if field isCoordinator is set (has been assigned a value) and false otherwise */
  public boolean isSetIsCoordinator() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ISCOORDINATOR_ISSET_ID);
  }

  public void setIsCoordinatorIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ISCOORDINATOR_ISSET_ID, value);
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getTimestamp() {
    return this.timestamp;
  }

  public ReadOrWriteRequest setTimestamp(@org.apache.thrift.annotation.Nullable java.lang.String timestamp) {
    this.timestamp = timestamp;
    return this;
  }

  public void unsetTimestamp() {
    this.timestamp = null;
  }

  /** Returns true if field timestamp is set (has been assigned a value) and false otherwise */
  public boolean isSetTimestamp() {
    return this.timestamp != null;
  }

  public void setTimestampIsSet(boolean value) {
    if (!value) {
      this.timestamp = null;
    }
  }

  /**
   * 
   * @see ConsistencyLevel
   */
  @org.apache.thrift.annotation.Nullable
  public ConsistencyLevel getConsistencyLevel() {
    return this.consistencyLevel;
  }

  /**
   * 
   * @see ConsistencyLevel
   */
  public ReadOrWriteRequest setConsistencyLevel(@org.apache.thrift.annotation.Nullable ConsistencyLevel consistencyLevel) {
    this.consistencyLevel = consistencyLevel;
    return this;
  }

  public void unsetConsistencyLevel() {
    this.consistencyLevel = null;
  }

  /** Returns true if field consistencyLevel is set (has been assigned a value) and false otherwise */
  public boolean isSetConsistencyLevel() {
    return this.consistencyLevel != null;
  }

  public void setConsistencyLevelIsSet(boolean value) {
    if (!value) {
      this.consistencyLevel = null;
    }
  }

  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case IS_COORDINATOR:
      if (value == null) {
        unsetIsCoordinator();
      } else {
        setIsCoordinator((java.lang.Boolean)value);
      }
      break;

    case TIMESTAMP:
      if (value == null) {
        unsetTimestamp();
      } else {
        setTimestamp((java.lang.String)value);
      }
      break;

    case CONSISTENCY_LEVEL:
      if (value == null) {
        unsetConsistencyLevel();
      } else {
        setConsistencyLevel((ConsistencyLevel)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case IS_COORDINATOR:
      return isIsCoordinator();

    case TIMESTAMP:
      return getTimestamp();

    case CONSISTENCY_LEVEL:
      return getConsistencyLevel();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case IS_COORDINATOR:
      return isSetIsCoordinator();
    case TIMESTAMP:
      return isSetTimestamp();
    case CONSISTENCY_LEVEL:
      return isSetConsistencyLevel();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof ReadOrWriteRequest)
      return this.equals((ReadOrWriteRequest)that);
    return false;
  }

  public boolean equals(ReadOrWriteRequest that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_isCoordinator = true;
    boolean that_present_isCoordinator = true;
    if (this_present_isCoordinator || that_present_isCoordinator) {
      if (!(this_present_isCoordinator && that_present_isCoordinator))
        return false;
      if (this.isCoordinator != that.isCoordinator)
        return false;
    }

    boolean this_present_timestamp = true && this.isSetTimestamp();
    boolean that_present_timestamp = true && that.isSetTimestamp();
    if (this_present_timestamp || that_present_timestamp) {
      if (!(this_present_timestamp && that_present_timestamp))
        return false;
      if (!this.timestamp.equals(that.timestamp))
        return false;
    }

    boolean this_present_consistencyLevel = true && this.isSetConsistencyLevel();
    boolean that_present_consistencyLevel = true && that.isSetConsistencyLevel();
    if (this_present_consistencyLevel || that_present_consistencyLevel) {
      if (!(this_present_consistencyLevel && that_present_consistencyLevel))
        return false;
      if (!this.consistencyLevel.equals(that.consistencyLevel))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isCoordinator) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((isSetTimestamp()) ? 131071 : 524287);
    if (isSetTimestamp())
      hashCode = hashCode * 8191 + timestamp.hashCode();

    hashCode = hashCode * 8191 + ((isSetConsistencyLevel()) ? 131071 : 524287);
    if (isSetConsistencyLevel())
      hashCode = hashCode * 8191 + consistencyLevel.getValue();

    return hashCode;
  }

  @Override
  public int compareTo(ReadOrWriteRequest other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetIsCoordinator()).compareTo(other.isSetIsCoordinator());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsCoordinator()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isCoordinator, other.isCoordinator);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetTimestamp()).compareTo(other.isSetTimestamp());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTimestamp()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.timestamp, other.timestamp);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetConsistencyLevel()).compareTo(other.isSetConsistencyLevel());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetConsistencyLevel()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.consistencyLevel, other.consistencyLevel);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("ReadOrWriteRequest(");
    boolean first = true;

    sb.append("isCoordinator:");
    sb.append(this.isCoordinator);
    first = false;
    if (isSetTimestamp()) {
      if (!first) sb.append(", ");
      sb.append("timestamp:");
      if (this.timestamp == null) {
        sb.append("null");
      } else {
        sb.append(this.timestamp);
      }
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("consistencyLevel:");
    if (this.consistencyLevel == null) {
      sb.append("null");
    } else {
      sb.append(this.consistencyLevel);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // alas, we cannot check 'isCoordinator' because it's a primitive and you chose the non-beans generator.
    if (consistencyLevel == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'consistencyLevel' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ReadOrWriteRequestStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public ReadOrWriteRequestStandardScheme getScheme() {
      return new ReadOrWriteRequestStandardScheme();
    }
  }

  private static class ReadOrWriteRequestStandardScheme extends org.apache.thrift.scheme.StandardScheme<ReadOrWriteRequest> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ReadOrWriteRequest struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // IS_COORDINATOR
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.isCoordinator = iprot.readBool();
              struct.setIsCoordinatorIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // TIMESTAMP
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.timestamp = iprot.readString();
              struct.setTimestampIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // CONSISTENCY_LEVEL
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.consistencyLevel = ConsistencyLevel.findByValue(iprot.readI32());
              struct.setConsistencyLevelIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetIsCoordinator()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'isCoordinator' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ReadOrWriteRequest struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(IS_COORDINATOR_FIELD_DESC);
      oprot.writeBool(struct.isCoordinator);
      oprot.writeFieldEnd();
      if (struct.timestamp != null) {
        if (struct.isSetTimestamp()) {
          oprot.writeFieldBegin(TIMESTAMP_FIELD_DESC);
          oprot.writeString(struct.timestamp);
          oprot.writeFieldEnd();
        }
      }
      if (struct.consistencyLevel != null) {
        oprot.writeFieldBegin(CONSISTENCY_LEVEL_FIELD_DESC);
        oprot.writeI32(struct.consistencyLevel.getValue());
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ReadOrWriteRequestTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public ReadOrWriteRequestTupleScheme getScheme() {
      return new ReadOrWriteRequestTupleScheme();
    }
  }

  private static class ReadOrWriteRequestTupleScheme extends org.apache.thrift.scheme.TupleScheme<ReadOrWriteRequest> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ReadOrWriteRequest struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      oprot.writeBool(struct.isCoordinator);
      oprot.writeI32(struct.consistencyLevel.getValue());
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetTimestamp()) {
        optionals.set(0);
      }
      oprot.writeBitSet(optionals, 1);
      if (struct.isSetTimestamp()) {
        oprot.writeString(struct.timestamp);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ReadOrWriteRequest struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      struct.isCoordinator = iprot.readBool();
      struct.setIsCoordinatorIsSet(true);
      struct.consistencyLevel = ConsistencyLevel.findByValue(iprot.readI32());
      struct.setConsistencyLevelIsSet(true);
      java.util.BitSet incoming = iprot.readBitSet(1);
      if (incoming.get(0)) {
        struct.timestamp = iprot.readString();
        struct.setTimestampIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

